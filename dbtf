#!/bin/bash

DATE=$(date +"%Y%m%d_%H%M%S")
ROTATE=10
ROOM="default"
DUMPDIR=/home/dbdumps
DB_USER=""
DB_PWD=""
DATABASEONLY="__empty__none__"
FTP_HOST=""
FTP_PORT="21"
FTP_USER=""
FTP_PWD=""

for i in "$@"
do
case $i in
    -r=*|--rotate=*)
    ROTATE="${i#*=}"
    shift # past argument=value
    ;;
    -c=*|--crondir=*)
    ROOM="${i#*=}"
    shift # past argument=value
    ;;
    -o=*|--output=*)
    DUMPDIR="${i#*=}"
    shift # past argument=value
    ;;
    -n=*|--dbuser=*)
    DB_USER="${i#*=}"
    shift # past argument=value
    ;;
    -p=*|--dbpwd=*)
    DB_PWD="${i#*=}"
    shift # past argument=value
    ;;
    -d=*|--database=*)
    DATABASEONLY="${i#*=}"
    shift # past argument=value
    ;;
    -u=*|--ftpuser=*)
    FTP_USER="${i#*=}"
    shift # past argument=value
    ;;
    -w=*|--ftppwd=*)
    FTP_PWD="${i#*=}"
    shift # past argument=value
    ;;
    -s=*|--ftphost=*)
    FTP_HOST="${i#*=}"
    shift # past argument=value
    ;;
    -t=*|--ftpport=*)
    FTP_PORT="${i#*=}"
    shift # past argument=value
    ;;
    -h|--help)
    echo "Usage: dbtf [-options]"
    echo "where options include:"
    echo "	-r | --rotate		rotate counter (e.g: -r=10, default: $ROTATE)"
    echo "	-c | --crondir		cron directory, useful when you want to store dump in many ways  (e.g: -c=hourly, default: $ROOM)"
    echo "	-o | --output		output directory, location where all dumps will be stored (e.g: -o=/home/dumps, default: /home/dbdumps)"
    echo "	-n | --dbuser		database username"
    echo "	-p | --dbpwd		database password"
    echo "	-d | --database		dumps only a specific database"
    echo "  	-u | --ftpuser		ftp username"
    echo "	-w | --ftppwd		ftp password"
    echo "	-s | --ftphost		ftp host"
    echo "	-t | --ftpport		ftp port"
    echo "	-h | --help		shows this help"
    exit 0
    ;;
    *)
          # unknown option
    ;;
esac
done

if [[ ! $ROTATE =~ ^[0-9]+$ ]]; then
      echo "Error: -r=*|--rotate=* parameter must be a number" && exit 1
fi

if [[ ! $ROOM =~ ^[a-zA-Z0-9_]+$ ]]; then
      echo "Error: -c=*|--crondir=* parameter must be a lowercase word" && exit 1
fi

if [[ ! $DATABASEONLY =~ ^[a-zA-Z_0-9]+$ ]]; then
      echo "Error: -d=*|--database=* parameter must be a database name" && exit 1
fi

echo "======= START"
echo "Working Directory: $DUMPDIR"
echo "Rotate Counter: $ROTATE"
echo "Room Name: $ROOM"
echo "Database User: $DB_USER"
echo "FTP Host: $FTP_HOST"
echo "FTP Port: $FTP_PORT"
echo "FTP User: $FTP_USER"
echo "======="

createDir() {
    ftp -n $FTP_HOST $FTP_PORT <<END_SCRIPT
quote USER $FTP_USER
quote PASS $FTP_PWD
mkdir $1
mkdir $1/$ROOM
quit
END_SCRIPT
}

uploadBackup() {
    ftp -n $FTP_HOST $FTP_PORT <<END_SCRIPT
quote USER $FTP_USER
quote PASS $FTP_PWD
binary
put $1 $2
quit
END_SCRIPT
}

deleteFile() {
    ftp -n $FTP_HOST $FTP_PORT <<END_SCRIPT
quote USER $FTP_USER
quote PASS $FTP_PWD
delete $1
quit
END_SCRIPT
}

for dir in $DUMPDIR/*/; do
	dir=${dir::-1}
	database=${dir/$DUMPDIR\//}

	[ ! $DATABASEONLY == "__empty__none__" ]
	specificDatabase=$?

	if [[ $specificDatabase == "0" ]]
	then
		if [[ ! $DATABASEONLY == $database ]]
		then
			continue
		fi
	fi

	[ $database == "*" ]
	nodirdb=$?

	if [[ $nodirdb == "0" ]]
	then
		echo "Error: You must have at least one directory named with one existing database in $DUMPDIR"
		exit 1
	fi

	echo "Dump database: $database"

	mkdir -p $DUMPDIR/$database/$ROOM
	createDir $database
	
	RELATIVE_OUTPUTFILE="$database/$ROOM/db_$database_$DATE.sql"
	OUTPUTFILE="$DUMPDIR/$RELATIVE_OUTPUTFILE"

	/usr/bin/mysqldump --user=$DB_USER --password=$DB_PWD --databases $database > $OUTPUTFILE && gzip $OUTPUTFILE
	uploadBackup $OUTPUTFILE $RELATIVE_OUTPUTFILE

	counter=$(find $DUMPDIR/$database/$ROOM/ -maxdepth 1 -type f | wc -l)
	#echo "Dump counter: $counter"

	dumps=$(ls -1 $DUMPDIR/$database/$ROOM/ | sort -r)
	cpt=0
	for dump in $dumps
	do
		((cpt+=1))
		if [ $cpt -gt $ROTATE ]
		then
			#echo "REMOVE FILE $cpt/$ROTATE"
			rm $DUMPDIR/$database/$ROOM/$dump
			deleteFile $database/$ROOM/$dump
		fi
	done

done

echo "======= END"
